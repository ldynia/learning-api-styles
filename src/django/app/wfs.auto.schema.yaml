openapi: 3.0.3
info:
  title: Weather Forecast Service API
  version: 1.0.0 (1.0)
  description: Weather Forecast Service
paths:
  /api/cities:
    get:
      operationId: v1_cities_retrieve
      tags:
      - v1
      security:
      - jwtAuth: []
      responses:
        '200':
          description: No response body
    post:
      operationId: v1_cities_create
      tags:
      - v1
      security:
      - jwtAuth: []
      responses:
        '200':
          description: No response body
  /api/cities/{uuid}:
    get:
      operationId: v1_cities_retrieve_2
      parameters:
      - in: path
        name: uuid
        schema:
          type: string
          format: uuid
        required: true
      tags:
      - v1
      security:
      - jwtAuth: []
      responses:
        '200':
          description: No response body
    put:
      operationId: v1_cities_update
      parameters:
      - in: path
        name: uuid
        schema:
          type: string
          format: uuid
        required: true
      tags:
      - v1
      security:
      - jwtAuth: []
      responses:
        '200':
          description: No response body
    patch:
      operationId: v1_cities_partial_update
      parameters:
      - in: path
        name: uuid
        schema:
          type: string
          format: uuid
        required: true
      tags:
      - v1
      security:
      - jwtAuth: []
      responses:
        '200':
          description: No response body
    delete:
      operationId: v1_cities_destroy
      parameters:
      - in: path
        name: uuid
        schema:
          type: string
          format: uuid
        required: true
      tags:
      - v1
      security:
      - jwtAuth: []
      responses:
        '204':
          description: No response body
  /api/forecasts:
    get:
      operationId: v1_forecasts_retrieve
      tags:
      - v1
      security:
      - jwtAuth: []
      - {}
      responses:
        '200':
          description: No response body
  /api/geocoding:
    get:
      operationId: v1_geocoding_retrieve
      tags:
      - v1
      security:
      - jwtAuth: []
      - {}
      responses:
        '200':
          description: No response body
  /api/history:
    get:
      operationId: v1_history_retrieve
      tags:
      - v1
      security:
      - jwtAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WeatherHistory'
          description: ''
  /api/jwt/obtain:
    post:
      operationId: v1_jwt_obtain_create
      description: |-
        Takes a set of user credentials and returns an access and refresh JSON web
        token pair to prove the authentication of those credentials.
      tags:
      - v1
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TokenObtainPair'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/TokenObtainPair'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/TokenObtainPair'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenObtainPair'
          description: ''
  /api/jwt/refresh:
    post:
      operationId: v1_jwt_refresh_create
      description: |-
        Takes a refresh type JSON web token and returns an access type JSON web
        token if the refresh token is valid.
      tags:
      - v1
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TokenRefresh'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/TokenRefresh'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/TokenRefresh'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenRefresh'
          description: ''
  /api/jwt/revoke:
    post:
      operationId: v1_jwt_revoke_create
      description: |-
        Takes a token and blacklists it. Must be used with the
        `rest_framework_simplejwt.token_blacklist` app installed.
      tags:
      - v1
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TokenBlacklist'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/TokenBlacklist'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/TokenBlacklist'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenBlacklist'
          description: ''
  /api/jwt/verify:
    post:
      operationId: v1_jwt_verify_create
      description: |-
        Takes a token and indicates if it is valid.  This view provides no
        information about a token's fitness for a particular use.
      tags:
      - v1
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TokenVerify'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/TokenVerify'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/TokenVerify'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenVerify'
          description: ''
  /api/seed:
    put:
      operationId: v1_seed_update
      description: Seed weather history for a specific city or all cities.
      tags:
      - v1
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/WeatherHistory'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/WeatherHistory'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/WeatherHistory'
        required: true
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WeatherHistory'
          description: ''
components:
  schemas:
    TokenBlacklist:
      type: object
      properties:
        refresh:
          type: string
          writeOnly: true
      required:
      - refresh
    TokenObtainPair:
      type: object
      properties:
        username:
          type: string
          writeOnly: true
        password:
          type: string
          writeOnly: true
        access:
          type: string
          readOnly: true
        refresh:
          type: string
          readOnly: true
      required:
      - access
      - password
      - refresh
      - username
    TokenRefresh:
      type: object
      properties:
        access:
          type: string
          readOnly: true
        refresh:
          type: string
          writeOnly: true
      required:
      - access
      - refresh
    TokenVerify:
      type: object
      properties:
        token:
          type: string
          writeOnly: true
      required:
      - token
    WeatherHistory:
      type: object
      description: Serializer takes `fields` argument that controls which fields should
        be displayed.
      properties:
        city_name:
          type: string
          readOnly: true
        city_uuid:
          type: string
          format: uuid
          readOnly: true
        date:
          type: string
          format: date
          description: Weather at this date.
        rain_sum_mm:
          type: string
          format: decimal
          pattern: ^-?\d{0,3}(?:\.\d{0,1})?$
          description: Sum of daily rain in mm.
        snowfall_sum_cm:
          type: string
          format: decimal
          pattern: ^-?\d{0,3}(?:\.\d{0,1})?$
          description: Sum of daily snowfall in cm.
        sunrise_iso8601:
          type: string
          format: date-time
          description: Sunrise time iso8601 formatted.
        sunset_iso8601:
          type: string
          format: date-time
          description: Sunset time iso8601 formatted.
        temperature_max_celsius:
          type: string
          format: decimal
          pattern: ^-?\d{0,2}(?:\.\d{0,1})?$
          description: Max temperature at 2m in Celsius.
        temperature_min_celsius:
          type: string
          format: decimal
          pattern: ^-?\d{0,2}(?:\.\d{0,1})?$
          description: Min temperature at 2m in Celsius.
        wind_speed_max_kmh:
          type: string
          format: decimal
          pattern: ^-?\d{0,3}(?:\.\d{0,1})?$
          description: Maximum wind speed and gusts on a day at 10m in kmh.
      required:
      - city_name
      - city_uuid
      - date
      - sunrise_iso8601
      - sunset_iso8601
  securitySchemes:
    jwtAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
