# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

from echo.proto.echo.v1 import echo_pb2 as echo_dot_proto_dot_echo_dot_v1_dot_echo__pb2

GRPC_GENERATED_VERSION = '1.73.1'
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in echo/proto/echo/v1/echo_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
    )


class EchoServiceStub(object):
    """tag::define_echoservice[]
    The service echoes back the content received from the client. // <7>
    <8>
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.DemoUnary = channel.unary_unary(
                '/echo.v1.EchoService/DemoUnary',
                request_serializer=echo_dot_proto_dot_echo_dot_v1_dot_echo__pb2.DemoUnaryRequest.SerializeToString,
                response_deserializer=echo_dot_proto_dot_echo_dot_v1_dot_echo__pb2.DemoUnaryResponse.FromString,
                _registered_method=True)
        self.DemoServerStreaming = channel.unary_stream(
                '/echo.v1.EchoService/DemoServerStreaming',
                request_serializer=echo_dot_proto_dot_echo_dot_v1_dot_echo__pb2.DemoServerStreamingRequest.SerializeToString,
                response_deserializer=echo_dot_proto_dot_echo_dot_v1_dot_echo__pb2.DemoServerStreamingResponse.FromString,
                _registered_method=True)
        self.DemoClientStreaming = channel.stream_unary(
                '/echo.v1.EchoService/DemoClientStreaming',
                request_serializer=echo_dot_proto_dot_echo_dot_v1_dot_echo__pb2.DemoClientStreamingRequest.SerializeToString,
                response_deserializer=echo_dot_proto_dot_echo_dot_v1_dot_echo__pb2.DemoClientStreamingResponse.FromString,
                _registered_method=True)
        self.DemoBidirectionalStreaming = channel.stream_stream(
                '/echo.v1.EchoService/DemoBidirectionalStreaming',
                request_serializer=echo_dot_proto_dot_echo_dot_v1_dot_echo__pb2.DemoBidirectionalStreamingRequest.SerializeToString,
                response_deserializer=echo_dot_proto_dot_echo_dot_v1_dot_echo__pb2.DemoBidirectionalStreamingResponse.FromString,
                _registered_method=True)


class EchoServiceServicer(object):
    """tag::define_echoservice[]
    The service echoes back the content received from the client. // <7>
    <8>
    """

    def DemoUnary(self, request, context):
        """end::define_echoservice[]
        tag::define_demounary_method[]
        This method demonstrates unary RPC.
        <9>
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DemoServerStreaming(self, request, context):
        """end::define_demounary_method[]
        This method demonstrates server streaming RPC.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DemoClientStreaming(self, request_iterator, context):
        """This method demonstrates client streaming RPC.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DemoBidirectionalStreaming(self, request_iterator, context):
        """This method demonstrates bidirectional streaming RPC.
        tag::end_echoservice[]
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_EchoServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'DemoUnary': grpc.unary_unary_rpc_method_handler(
                    servicer.DemoUnary,
                    request_deserializer=echo_dot_proto_dot_echo_dot_v1_dot_echo__pb2.DemoUnaryRequest.FromString,
                    response_serializer=echo_dot_proto_dot_echo_dot_v1_dot_echo__pb2.DemoUnaryResponse.SerializeToString,
            ),
            'DemoServerStreaming': grpc.unary_stream_rpc_method_handler(
                    servicer.DemoServerStreaming,
                    request_deserializer=echo_dot_proto_dot_echo_dot_v1_dot_echo__pb2.DemoServerStreamingRequest.FromString,
                    response_serializer=echo_dot_proto_dot_echo_dot_v1_dot_echo__pb2.DemoServerStreamingResponse.SerializeToString,
            ),
            'DemoClientStreaming': grpc.stream_unary_rpc_method_handler(
                    servicer.DemoClientStreaming,
                    request_deserializer=echo_dot_proto_dot_echo_dot_v1_dot_echo__pb2.DemoClientStreamingRequest.FromString,
                    response_serializer=echo_dot_proto_dot_echo_dot_v1_dot_echo__pb2.DemoClientStreamingResponse.SerializeToString,
            ),
            'DemoBidirectionalStreaming': grpc.stream_stream_rpc_method_handler(
                    servicer.DemoBidirectionalStreaming,
                    request_deserializer=echo_dot_proto_dot_echo_dot_v1_dot_echo__pb2.DemoBidirectionalStreamingRequest.FromString,
                    response_serializer=echo_dot_proto_dot_echo_dot_v1_dot_echo__pb2.DemoBidirectionalStreamingResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'echo.v1.EchoService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('echo.v1.EchoService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class EchoService(object):
    """tag::define_echoservice[]
    The service echoes back the content received from the client. // <7>
    <8>
    """

    @staticmethod
    def DemoUnary(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/echo.v1.EchoService/DemoUnary',
            echo_dot_proto_dot_echo_dot_v1_dot_echo__pb2.DemoUnaryRequest.SerializeToString,
            echo_dot_proto_dot_echo_dot_v1_dot_echo__pb2.DemoUnaryResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def DemoServerStreaming(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(
            request,
            target,
            '/echo.v1.EchoService/DemoServerStreaming',
            echo_dot_proto_dot_echo_dot_v1_dot_echo__pb2.DemoServerStreamingRequest.SerializeToString,
            echo_dot_proto_dot_echo_dot_v1_dot_echo__pb2.DemoServerStreamingResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def DemoClientStreaming(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_unary(
            request_iterator,
            target,
            '/echo.v1.EchoService/DemoClientStreaming',
            echo_dot_proto_dot_echo_dot_v1_dot_echo__pb2.DemoClientStreamingRequest.SerializeToString,
            echo_dot_proto_dot_echo_dot_v1_dot_echo__pb2.DemoClientStreamingResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def DemoBidirectionalStreaming(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_stream(
            request_iterator,
            target,
            '/echo.v1.EchoService/DemoBidirectionalStreaming',
            echo_dot_proto_dot_echo_dot_v1_dot_echo__pb2.DemoBidirectionalStreamingRequest.SerializeToString,
            echo_dot_proto_dot_echo_dot_v1_dot_echo__pb2.DemoBidirectionalStreamingResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
